name: Build and Deploy Infrastructure

# Triggering conditions for the workflow
on:
  push:
    branches:
      - main  # Trigger on push to the main branch
      - stage  # Trigger on push to the stage branch
    paths:
      - 'main/**'  # Trigger if files in the 'main' directory are changed
      - 'packer_build/**'  # Trigger if files in the 'packer_build' directory are changed
  pull_request:
    branches:
      - main  # Trigger on pull request to the main branch
    paths:
      - 'main/**'  # Trigger if files in the 'main' directory are changed
      - 'packer_build/**'  # Trigger if files in the 'packer_build' directory are changed

env:
  # Environment variables for AWS configuration
  AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS region for deployment
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}  # S3 bucket for storing Terraform state

jobs:
  # Job to build the Amazon Machine Image (AMI) using Packer
  build-ami:
    name: Build AMI with Packer
    runs-on: ubuntu-latest  # Run on the latest Ubuntu image in GitHub Actions
    defaults:
      run:
        shell: bash  # Use bash shell for running commands
        working-directory: ./packer_build  # Set the working directory to 'packer_build'

    outputs:
      ami_id: ${{ steps.build-ami.outputs.ami_id }}  # Define output 'ami_id' for later use

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4  # Use the checkout action to pull down code

      # Step 2: Install Packer tool to build the AMI
      - name: Install Packer
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl -fsSL -o packer.zip https://releases.hashicorp.com/packer/1.8.4/packer_1.8.4_linux_amd64.zip  # Download Packer
          unzip packer.zip  # Extract Packer
          sudo mv packer /usr/local/bin/  # Move Packer to a directory in the PATH
          packer --version  # Verify installation of Packer

      # Step 3: Configure AWS credentials for Packer
      - name: Configure AWS Credentials for Packer
        uses: aws-actions/configure-aws-credentials@v4  # Use the AWS credentials action (v4)
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access key stored in GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret key stored in GitHub Secrets
          aws-region: ${{ env.AWS_REGION }}  # AWS region set in the environment variables

      # Step 4: Run Packer build to create an AMI
      - name: Run Packer Build
        id: build-ami  # ID to reference in other jobs
        run: |
          cd ./packer_build  # Change to the Packer build directory
          packer init aws-ubuntu.pkr.hcl  # Initialize the Packer build
          packer validate aws-ubuntu.pkr.hcl  # Validate the Packer build configuration
          packer build -machine-readable aws-ubuntu.pkr.hcl | tee output.txt  # Run the build and capture output
          AMI_ID=$(grep -oP '(?<=artifact,0,id,)[^,]*' output.txt | cut -d':' -f2)  # Extract AMI ID from output
          echo "Extracted AMI ID: $AMI_ID"  # Print the AMI ID
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV  # Set the AMI ID as an environment variable for the next steps

  # Job to deploy the infrastructure using Terraform
  deploy-infra:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest  # Run on the latest Ubuntu image in GitHub Actions
    needs: build-ami  # This job depends on the successful completion of the 'build-ami' job
    defaults:
      run:
        shell: bash  # Use bash shell for running commands
        working-directory: ./main  # Set the working directory to 'main'

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4  # Use the checkout action to pull down code

      # Step 2: Install Terraform
      - name: Set Up Terraform
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -  # Add HashiCorp's GPG key
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"  # Add Terraform repository
          sudo apt-get update -y
          sudo apt-get install -y terraform  # Install Terraform

      # Step 3: Configure AWS credentials for Terraform
      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v4  # Use the AWS credentials action (v4)
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access key stored in GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret key stored in GitHub Secrets
          aws-region: ${{ env.aws-region }}  # AWS region set in the environment variables

      # Step 4: Check Terraform formatting
      - name: Terraform fmt
        id: fmt
        run: |
          cd ./main  # Change to the Terraform directory
          terraform fmt -check  # Check if Terraform configuration is properly formatted

      # Step 5: Initialize Terraform
      - name: Initialize Terraform
        id: init
        run: |
          cd ./main
          terraform init  # Initialize Terraform, download necessary providers

      # Step 6: Validate Terraform configuration
      - name: Validate Terraform
        id: validate
        run: |
          cd ./main
          terraform validate  # Validate the Terraform configuration for any errors

      # Step 7: Plan Terraform deployment
      - name: Plan Terraform Deployment
        id: plan
        run: |
          cd ./main
          terraform plan -var-file="terraform.tfvars" -input=false -no-color -out planfile  # Plan the deployment using a Terraform variable file
        continue-on-error: true # Allow the workflow to continue even if this step fails
      
      # Step 8: Check if Terraform plan failed
      - name: Terraform Status
        # Check if the previous plan step failed
        if: steps.plan.outcome == 'failure' 
        run: |
          exit 1  # Exit the workflow with an error if the plan failed
        
        # Step 9: Apply the Terraform deployment
      - name: Apply Terraform Deployment
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name =='push' # Only apply the deployment on push events
        run: |
          cd ./main
          terraform apply -auto-approve -var-file="terraform.tfvars" -parallelism=1 planfile# Apply the deployment automatically (no prompts)
               
      # Optional step to destroy Terraform infrastructure (commented out)
      - name: Destroy Terraform Infrastructure
        if: always()  # Ensures this step runs even if previous steps fail
        run: |
          cd ./main
          terraform destroy -auto-approve -var-file="terraform.tfvars"  # Destroy the infrastructure automatically (no prompts)
